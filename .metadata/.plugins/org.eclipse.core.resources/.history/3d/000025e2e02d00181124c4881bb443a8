/*
 * Copyright (c) 2017, NXP Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * @file    0322_examen1.c
 * @brief   Application entry point.
 */
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MK64F12.h"
#include "fsl_debug_console.h"
/* TODO: insert other include files here. */
#include "FreeRTOS.h"
#include "task.h"
#include "timers.h"
#include "semphr.h"
#include "event_groups.h"
/* TODO: insert other definitions and declarations here. */
#define DELAY_ONE_SECOND 1000
#define EVENT (1<<0)
SemaphoreHandle_t semaphore;
QueueHandle_t xQueue;
EventGroupHandle_t time_event;
SemaphoreHandle_t mutex;


/*
 * @brief   Application entry point.
 */

void initial_task()
{
	xTaskCreate(task1, "task1", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-2, NULL);
	xTaskCreate(task2, "task2", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-2, NULL);
	xTaskCreate(task3, "task3", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-2, NULL);

	 vTaskSuspend( initial_task );
}

void task1()
{
	const int8_t * pText_task1 = "Soy la tarea 1\r\n";
	time_msg_t *message;
	for(;;)
	{
		message = pvPortMalloc(sizeof(time_msg_t));



		xQueueSend( xQueue,&message,portMAX_DELAY);
	}

}

void task2()
{

	const int8_t * pText_task1 = "Tarea 2 en ejecuciÃ³n\n";
	time_msg_t *message;
	for(;;)
	{
		message = pvPortMalloc(sizeof(time_msg_t));



		xQueueSend( xQueue,&message,portMAX_DELAY);
	}


}

void task3()
{
	time_msg_t *message;
	message = pvPortMalloc(sizeof(time_msg_t));
	for(;;)
	{



		xQueueReceive(xQueue,&message,1000);
	}

}

int main(void) {

  	/* Init board hardware. */
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
  	/* Init FSL debug console. */
    BOARD_InitDebugConsole();

	time_event = xEventGroupCreate();
	xQueue = xQueueCreate(3,sizeof( time_msg_t));
	mutex = xSemaphoreCreateMutex();

    xTaskCreate(initial_task, "initial_task", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES, NULL);
	vTaskStartScheduler();

    /* Force the counter to be placed into memory. */
    volatile static int i = 0 ;
    /* Enter an infinite loop, just incrementing a counter. */
    while(1) {
        i++ ;
    }
    return 0 ;
}
