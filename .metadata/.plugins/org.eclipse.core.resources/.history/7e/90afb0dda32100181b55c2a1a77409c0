/*
 * Copyright (c) 2017, NXP Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of NXP Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
/**
 * @file    0305_FromISR.c
 * @brief   Application entry point.
 */
#include <stdio.h>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "MK64F12.h"
#include "fsl_debug_console.h"
/* TODO: insert other include files here. */
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"

/* TODO: insert other definitions and declarations here. */
SemaphoreHandle_t g_led_semaphore;
void PORTA_IRQHandler()
52 {
53 	BaseType_t xHigherPriorityTaskWoken;
54 	PORT_ClearPinsInterruptFlags(PORTA, 1<<4);
55 	xHigherPriorityTaskWoken = pdFALSE;
56 	xSemaphoreGiveFromISR( g_led_semaphore, &xHigherPriorityTaskWoken );
57 	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
58 }
59

60 void led_task(void *arg)
61 {
62 	for(;;)
63 	{
64 		xSemaphoreTake(g_led_semaphore,portMAX_DELAY);
65 		GPIO_TogglePinsOutput(GPIOB,1<<21);
66 	}
67 }
68

69 void dummy(void *arg)
70 {
71 	xSemaphoreGive(g_led_semaphore);
72 	for(;;)
73 	{
74

75 	}
76 }
77

78 int main(void)
79 {
80

81 	/* Init board hardware. */
82 	BOARD_InitBootPins();
83 	BOARD_InitBootClocks();
84 	BOARD_InitBootPeripherals();
85 	/* Init FSL debug console. */
86 	BOARD_InitDebugConsole();
87

88 	CLOCK_EnableClock(kCLOCK_PortB);
89 	CLOCK_EnableClock(kCLOCK_PortA);
90

91 	port_pin_config_t config_led =
92 	{ kPORT_PullDisable, kPORT_SlowSlewRate, kPORT_PassiveFilterDisable,
93 			kPORT_OpenDrainDisable, kPORT_LowDriveStrength, kPORT_MuxAsGpio,
94 			kPORT_UnlockRegister, };
95

96 	PORT_SetPinConfig(PORTB, 21, &config_led);
97



 	port_pin_config_t config_switch =
 	{ kPORT_PullDisable, kPORT_SlowSlewRate, kPORT_PassiveFilterDisable,
 			kPORT_OpenDrainDisable, kPORT_LowDriveStrength, kPORT_MuxAsGpio,
 			kPORT_UnlockRegister};
 	PORT_SetPinInterruptConfig(PORTA, 4, kPORT_InterruptFallingEdge);


 	PORT_SetPinConfig(PORTA, 4, &config_switch);


 	gpio_pin_config_t led_config_gpio =
 	{ kGPIO_DigitalOutput, 1 };


 	GPIO_PinInit(GPIOB, 21, &led_config_gpio);


 	gpio_pin_config_t switch_config_gpio =
 	{ kGPIO_DigitalInput, 1 };


 	GPIO_PinInit(GPIOA, 4, &switch_config_gpio);


 	NVIC_EnableIRQ(PORTA_IRQn);
 	NVIC_SetPriority(PORTA_IRQn,5);


 	GPIO_WritePinOutput(GPIOB,21,0);
 	g_led_semaphore = xSemaphoreCreateBinary();
 	xTaskCreate(led_task, "LED task", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-1, NULL);
 	//xTaskCreate(dummy, "dummy task", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-2, NULL);


 	vTaskStartScheduler();
 	while (1)
 	{


 	}
 	return 0;
 }
